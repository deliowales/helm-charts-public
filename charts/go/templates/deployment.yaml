{{- if eq .Values.deployment.enabled true}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "go.application.name" . }}
  labels:
    {{- include "go.labels" . | nindent 4 }}
  annotations:
    {{- include "go.annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ include "go.application.name" . }}"
  template:
    metadata:
      annotations:
        {{- include "go.annotations" . | nindent 8 }}
        {{- include "go.application.vault.annotations" . | nindent 8 }}
      labels:
        {{- include "go.labels" . | nindent 8 }}
        {{- if and (eq (include "go.cloud.provider" .) "Azure") (eq .Values.azure.identity.enabled true) }}
        aadpodidbinding: {{ .Values.azure.identity.name }}
        {{- end }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- include "go.deployment.topologySpreadConstraints" . | nindent 6 }}
      {{ if .Values.deployment.nodeSelector.toleration -}}
      nodeSelector:
        {{- include "node.deployment.nodeSelector.toleration" . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "go.application.name" .) }}
      containers:
        - name: "{{ include "go.application.name" . }}"
          image: "{{ include "go.application.imageURL" . }}"
          imagePullPolicy: {{ .Values.application.image.pullPolicy }}
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          env:
            - name: APP_NAME
              value: {{ .Values.application.name | lower | quote }}
            - name: PLATFORM
              value: "{{ include "go.cloud.provider" . }}"
            {{- if eq (include "go.cloud.provider" .) "AWS" }}
            - name: AWS_REGION
              value: {{ .Values.cloud.region }}
            {{- end }}
            {{- range .Values.application.env }}
            - name: "{{ .name }}"
              value: "{{ .value }}"
            {{- end }}
          ports:
            - name: http
              containerPort: 50051
              protocol: TCP
          resources:
            {{- toYaml .Values.application.resources | nindent 12 }}
          livenessProbe:
            exec:
              command: ["/go/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["/go/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            {{- if .Values.application.extraVolumes -}}
            {{- include "go.application.extraConfigmapMounts" . | nindent 12 }}
            {{- end }}
      securityContext:
        fsGroup: 1000
      volumes:
        - name: tmp
          emptyDir: {}
        {{- if .Values.application.extraVolumes -}}
        {{- include "go.application.extraConfigmapVolumes" . | nindent 8 }}
        {{- end }}
{{- end }}
