{{- if and (eq (include "microservice.application.language" .)  "node") (eq .Values.deployment.enabled true)}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "microservice.application.name" . }}
  labels:
    {{- include "microservice.labels" . | nindent 4 }}
  annotations:
    {{- include "microservice.annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "microservice.application.name" . }}
  template:
    metadata:
      annotations:
        {{- include "microservice.annotations" . | nindent 8 }}
        {{- include "microservice.vault.annotations" . | nindent 8 }}
      labels:
        {{- include "microservice.labels" . | nindent 8 }}
        {{- if and (eq (include "microservice.cloud.provider" .) "Azure") (eq .Values.azure.identity.enabled true) }}
        aadpodidbinding: {{ .Values.azure.identity.name }}
        {{- end }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.deployment.topologySpreadConstraints -}}
      {{- range .Values.deployment.topologySpreadConstraints }}
      topologySpreadConstraints:
        - maxSkew: {{ .maxSkew }}
          topologyKey: {{ .topologyKey }}
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: {{ $.Values.application.name | lower }}
      {{- end -}}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "microservice.application.name" .) }}
      containers:
        - name: {{ include "microservice.application.name" . }}
          image: {{ include "microservice.project.imageURL" . }}
          imagePullPolicy: {{ .Values.application.image.pullPolicy }}
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
          env:
            - name: APP_NAME
              value: {{ .Values.application.name | lower | quote }}
            - name: DISABLE_INSTANA
              value: "TRUE"
            - name: PLATFORM
              value: {{ include "microservice.cloud.provider" . }}
            {{- if eq (include "microservice.cloud.provider" .) "AWS" }}
            - name: AWS_REGION
              value: {{ .Values.cloud.region }}
            {{- end }}
            {{- range .Values.application.env }}
            - name: "{{ .name }}"
              value: "{{ .value }}"
            {{- end }}
          ports:
            - name: http
              containerPort: {{ include "microservice.application.containerPort" . }}
              protocol: TCP
          resources:
            {{- toYaml .Values.application.resources | nindent 12 }}
          livenessProbe:
            {{- if eq .Values.application.livenessProbe.type "tcp" }}
            tcpSocket:
              port: {{ include "microservice.application.containerPort" . }}
            {{- else }}
            httpGet:
              port: {{ include "microservice.application.containerPort" . }}
              path: {{ .Values.application.readinessProbe.path }}
            {{- end }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            {{- if eq .Values.application.readinessProbe.type "tcp" }}
            tcpSocket:
              port: {{ include "microservice.application.containerPort" . }}
            {{- else }}
            httpGet:
              port: {{ include "microservice.application.containerPort" . }}
              path: {{ .Values.application.readinessProbe.path }}
            {{- end }}
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            {{- if eq .Values.clamAV.enabled true}}
            - name: clamd
              mountPath: /run/clamav
            - name: clamlogs
              mountPath: /var/log/clamav
            - name: clamavtmp
              mountPath: /var/lib/clamav
            {{- end }}
      securityContext:
        fsGroup: 1000
      volumes:
        - name: tmp
          emptyDir: {}
        {{- if eq .Values.clamAV.enabled true}}
        - name: clamd
          emptyDir: {}
        - name: clamlogs
          emptyDir: {}
        - name: clamavtmp
          emptyDir: {}
        {{- end }}
{{- end }}