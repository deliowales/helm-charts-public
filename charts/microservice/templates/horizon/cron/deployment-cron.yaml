{{- if and (eq .Values.application.name "horizon") (eq .Values.application.cron.enabled true) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "microservice.application.name" . }}-cron
  labels:
    {{- include "microservice.labels" . | nindent 4 }}
    version: cron
  annotations:
    {{- include "microservice.annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  {{- if .Values.deployment.rolloutStrategyType -}}
  strategy:
    type: Recreate
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "microservice.application.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      version: cron
  template:
    metadata:
      annotations:
        {{- include "microservice.annotations" . | nindent 8 }}
        {{- include "microservice.vault.annotations" . | nindent 8 }}
      labels:
        {{- include "microservice.labels" . | nindent 8 }}
        app.kubernetes.io/name: {{ include "microservice.application.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- if eq .Values.cloud.platform "Azure" }}
        {{- if eq .Values.azure.identity.enabled true }}
        aadpodidbinding: {{ .Values.azure.identity.name }}
        {{- end }}
        {{- end }}
        version: cron
    spec:
      serviceAccountName: {{ include "microservice.application.name" . }}
      containers:
        - name: {{ include "microservice.application.name" . }}
          image: {{ include "microservice.project.imageURL" . }}
          imagePullPolicy: {{ .Values.application.image.pullPolicy }}
          args: [ "true" ]
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
          env:
            - name: PLATFORM
              value: {{ .Values.cloud.platform | quote }}
            - name: APP_NAME
              value: "{{ include "microservice.application.name" . }}-cron"
            {{- if eq (.Values.cloud.platform|toString) "AWS" }}
            - name: AWS_REGION
              value: {{ .Values.cloud.region }}
            {{- end }}
            - name: CRON
              value: "true"
            - name: CONTAINER
              value: "true"
          ports:
            - name: http
              containerPort: {{ include "microservice.application.containerPort" . }}
              protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "500m"
              memory: "1Gi"
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: fpm-pool-config-volume
              mountPath: /usr/local/etc/php-fpm.d/www.conf
              subPath: www.conf
            - name: php-config-volume
              mountPath: /usr/local/etc/php/php.ini
              subPath: php.ini
            - name: shared-files
              mountPath: /var/www/html
            - name: tmp
              mountPath: /tmp
            - name: newrelic-log
              mountPath: /var/log/newrelic/
            {{- if eq .Values.supervisor.enabled true }}
            - name: supervisor-config-volume
              mountPath: /etc/supervisord-tmp.conf
              subPath: supervisord-tmp.conf
            - name: supervisor-logs
              mountPath: /home/app
            {{- end }}

        - name: nginx
          image: {{ include "microservice.nginx.imageURL" . }}
          imagePullPolicy: {{  .Values.nginx.image.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
          lifecycle:
            postStart:
              exec:
                command: ["sh"]
          ports:
            - name: http
              containerPort: {{ .Values.nginx.service.internalPort }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: {{ include "microservice.application.containerPort" . }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: {{ include "microservice.application.containerPort" . }}
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: shared-files
              mountPath: /var/www/html
            - name: tmp
              mountPath: /tmp

        - name: logs
          image: {{ include "microservice.logging.imageURL" . }}
          resources:
            {{- toYaml .Values.logging.resources | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 1001
          env:
            - name: PLATFORM
              value: {{ .Values.cloud.platform }}
            - name: DOCKER_IMAGE
              value: {{ include "microservice.project.imageURL" . }}
            - name: ENVIRONMENT
              value: {{ .Values.cloud.environment }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NEW_RELIC_LICENSE_KEY
              value: {{ .Values.newrelic.licenseKey }}
            - name: FLUENT_BIT_LOG_PATH
              value: {{ .Values.logging.logPath }}
            - name: FLUENT_BIT_PARSER_PATH
              value: {{ .Values.logging.parserPath }}
            - name: FLUENT_BIT_MULTILINE
              value: {{ .Values.logging.multiLine | quote }}
          volumeMounts:
            - name: shared-files
              mountPath: /var/www/html

      securityContext:
        fsGroup: 1000

      volumes:
        - name: fpm-pool-config-volume
          configMap:
            name: fpm-pool-configmap
        - name: php-config-volume
          configMap:
            name: php-configmap
        - name: nginx-config-volume
          configMap:
            name: nginx-configmap
        - name: shared-files
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: newrelic-log
          emptyDir: {}
        {{- if eq .Values.supervisor.enabled true }}
        - name: supervisor-config-volume
          configMap:
            name: supervisor-configmap
        - name: supervisor-logs
          emptyDir: {}
        {{- end }}
{{- end }}